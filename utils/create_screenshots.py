#!/usr/bin/env python3
"""
Create screenshots for Zig examples.
This script helps automate the process of taking screenshots of Excel files
generated by Zig implementations, comparing them with C implementations.
After verification, Zig-generated Excel files are moved to a dedicated directory.
"""

import os
import sys
import subprocess
import time
import shutil
from pathlib import Path
import argparse
from PIL import Image


def check_screenshot_exists(example_name):
    """Check if a screenshot exists for the Zig implementation."""
    root_dir = Path(__file__).parent.parent
    screenshots_dir = root_dir / "testing" / "screenshots"
    screenshot_file = screenshots_dir / f"comparison_{example_name}.png"
    return screenshot_file.exists()


def find_examples_without_screenshots():
    """Find examples that don't have Zig screenshots."""
    root_dir = Path(__file__).parent.parent
    examples_dir = root_dir / "examples"
    
    # Get all .zig files from examples directory
    all_examples = []
    for file in examples_dir.glob("*.zig"):
        # Remove .zig extension and any "example_" prefix
        example_name = file.stem
        if example_name.startswith("example_"):
            example_name = example_name[8:]
        all_examples.append(example_name)
    
    all_examples.sort()
    missing_screenshots = []
    
    for example in all_examples:
        if not check_screenshot_exists(example):
            missing_screenshots.append(example)
    
    return missing_screenshots


def build_example(example_name):
    """Build the Zig example."""
    root_dir = Path(__file__).parent.parent
    
    # Build Zig example
    cmd = ["zig", "build", example_name]
    try:
        subprocess.run(cmd, cwd=root_dir, check=True)
        return True
    except subprocess.CalledProcessError:
        print(f"Error building Zig example: {example_name}")
        return False


def get_c_excel_file(example_name):
    """Get the path to the C Excel file."""
    root_dir = Path(__file__).parent.parent
    c_output_dir = root_dir / "testing" / "c-output-xls"
    extension = ".xlsm" if example_name == "macro" else ".xlsx"
    c_excel_file = c_output_dir / f"{example_name}{extension}"
    
    if not c_excel_file.exists():
        print(f"C Excel file not found: {c_excel_file}")
        return None
    
    return c_excel_file


def cleanup_excel_file(example_name, zig_excel_file):
    """
    Move the Zig-generated Excel file to the zig-output-xls directory.
    
    Args:
        example_name: The name of the example
        zig_excel_file: Path to the Zig-generated Excel file
    
    Returns:
        bool: True if the file was moved successfully, False otherwise
    """
    root_dir = Path(__file__).parent.parent
    zig_output_dir = root_dir / "testing" / "zig-output-xls"
    
    # Create the directory if it doesn't exist
    zig_output_dir.mkdir(parents=True, exist_ok=True)
    
    # Special case for macro example which uses .xlsm
    extension = ".xlsm" if example_name == "macro" else ".xlsx"
    
    # Destination path 
    dest_file = zig_output_dir / f"zig-{example_name}{extension}"
    
    try:
        # Move the file
        shutil.move(str(zig_excel_file), str(dest_file))
        # Print relative path instead of full path
        relative_path = f"testing/zig-output-xls/zig-{example_name}{extension}"
        print(f"✅ Moved Excel file to: {relative_path}")
        return True
    except Exception as e:
        print(f"❌ Error moving Excel file: {e}")
        return False


def process_screenshot(screenshot_file, top_crop=25, bottom_crop=155, left_crop=0, right_crop=0):
    """Post-process screenshot to crop pixels from edges.
    Default crops 25px from top (Excel title bar) and 155px from bottom (Excel status bar)."""
    try:
        with Image.open(screenshot_file) as img:
            width, height = img.size
            cropped = img.crop((
                left_crop,
                top_crop, 
                width - right_crop, 
                height - bottom_crop
            ))
            cropped.save(screenshot_file)
            return True
    except Exception as e:
        print(f"Error processing screenshot: {e}")
        return False


def take_screenshot(example_name, top_crop=25, bottom_crop=155, left_crop=0, right_crop=0):
    """
    Take a screenshot of both C and Zig Excel files side by side.
    
    This function:
    1. Builds the Zig example
    2. Positions both C and Zig Excel files side by side using excel-position.sh
    3. Takes a screenshot using the macOS screencapture utility
    4. Opens the screenshot for the user to view
    5. Asks the user if the outputs match
    6. If they match, moves the Zig Excel file to the zig-output-xls directory
    
    Args:
        example_name: Name of the example to screenshot
        top_crop: Pixels to crop from top (default: 25 for Excel title bar)
        bottom_crop: Pixels to crop from bottom (default: 155 for Excel status bar)
        left_crop: Pixels to crop from left (default: 0)
        right_crop: Pixels to crop from right (default: 0)
    """
    if sys.platform != "darwin":
        print("This script currently only supports macOS for automatic screenshots.")
        return False
    
    root_dir = Path(__file__).parent.parent
    screenshots_dir = root_dir / "testing" / "screenshots"
    comparison_dir = root_dir / "testing" / "comparison_results"
    
    # Create directories if they don't exist
    screenshots_dir.mkdir(parents=True, exist_ok=True)
    comparison_dir.mkdir(parents=True, exist_ok=True)
    
    # Determine the screenshot filename
    screenshot_file = screenshots_dir / f"comparison_{example_name}.png"
    
    # Build the example
    if not build_example(example_name):
        return False
    
    # Get the C Excel file
    c_excel_file = get_c_excel_file(example_name)
    if not c_excel_file:
        return False
    
    # Determine the Zig Excel file path
    extension = ".xlsm" if example_name == "macro" else ".xlsx"
    zig_excel_file = root_dir / f"zig-{example_name}{extension}"
    
    if not zig_excel_file.exists():
        print(f"Zig Excel file not found: {zig_excel_file}")
        return False
    
    # Position Excel files side by side
    excel_position_script = root_dir / "utils" / "excel-position.sh"
    
    print(f"\nPositioning Excel files side by side...")
    try:
        subprocess.run([
            str(excel_position_script),
            str(c_excel_file),
            str(zig_excel_file)
        ], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error positioning Excel files: {e}")
        return False
    
    # Give Excel time to position windows
    print("Waiting for Excel to position windows...")
    time.sleep(3)
    
    # Take screenshot using screencapture
    relative_screenshot_path = f"testing/screenshots/comparison_{example_name}.png"
    print(f"Taking screenshot and saving to: {relative_screenshot_path}")
    try:
        subprocess.run([
            "screencapture",
            "-o",  # Capture window contents only
            "-x",  # No sound
            str(screenshot_file)
        ], check=True)
        
        # Post-process the screenshot
        if process_screenshot(screenshot_file, top_crop, bottom_crop, left_crop, right_crop):
            print("Screenshot processed successfully")
        else:
            print("Warning: Failed to process screenshot")
            
    except subprocess.CalledProcessError as e:
        print(f"Error taking screenshot: {e}")
        return False
    
    # Check if the screenshot was saved
    if screenshot_file.exists():
        print(f"Screenshot saved: {relative_screenshot_path}")
        
        # Open the screenshot for the user to view
        print("\nOpening screenshot for review...")
        try:
            # Open the screenshot with Preview
            subprocess.run([
                "open", 
                "-a", "Preview", 
                str(screenshot_file)
            ], check=True)
            
            # Give the user time to view the screenshot
            print("Screenshot opened in Preview. Press Enter when ready to continue...")
            input()
            
            # Close Preview
            exit_script = """
            tell application "Preview"
                quit
            end tell
            """
            subprocess.run(["osascript", "-e", exit_script], check=True)
            
        except subprocess.CalledProcessError as e:
            print(f"Error opening screenshot: {e}")
            # Continue anyway, as this is not critical
        
        # Ask user if outputs match
        print("\n=== VISUAL COMPARISON ===")
        print("Do the C and Zig outputs match? (y/n)")
        user_input = input("Enter y or n: ").lower()
        
        # Save comparison result
        result_file = comparison_dir / f"{example_name}_output.txt"
        with open(result_file, 'w') as f:
            f.write(f"Comparison of {example_name} screenshots:\n")
            # Use relative paths instead of full paths
            c_relative_path = f"testing/c-output-xls/{os.path.basename(c_excel_file)}"
            zig_relative_path = f"testing/zig-output-xls/zig-{example_name}{extension}"
            screenshot_relative_path = f"testing/screenshots/comparison_{example_name}.png"
            
            f.write(f"C Excel file: {c_relative_path}\n")
            f.write(f"Zig Excel file: {zig_relative_path}\n")
            f.write(f"Screenshot: {screenshot_relative_path}\n\n")
            
            if user_input == 'y':
                f.write("RESULT: MATCH - User confirmed visual match\n")
                print("✅ Visual match confirmed.")
                
                # Move the Zig Excel file to the output directory
                cleanup_excel_file(example_name, zig_excel_file)
                
                return True
            else:
                f.write("RESULT: DIFFERENT - User reported visual differences\n")
                print("❌ Visual differences reported.")
                return False
    else:
        print(f"Screenshot not found at: {screenshot_file}")
        return False


def take_simple_screenshot(screenshot_file, top_crop=25, bottom_crop=30, left_crop=0, right_crop=0):
    """Take and crop a screenshot without Excel file handling."""
    if sys.platform != "darwin":
        print("This script currently only supports macOS for automatic screenshots.")
        return False

    print(f"Taking screenshot and saving to: {screenshot_file}")
    try:
        subprocess.run([
            "screencapture",
            "-o",  # Capture window contents only
            "-x",  # No sound
            str(screenshot_file)
        ], check=True)
        
        if process_screenshot(screenshot_file, top_crop, bottom_crop, left_crop, right_crop):
            print("Screenshot processed successfully")
            return True
        else:
            print("Warning: Failed to process screenshot")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"Error taking screenshot: {e}")
        return False


def crop_existing_file(file_path, top_crop=25, bottom_crop=30, left_crop=0, right_crop=0):
    """Just crop an existing PNG file."""
    try:
        with Image.open(file_path) as img:
            width, height = img.size
            cropped = img.crop((
                left_crop,
                top_crop, 
                width - right_crop, 
                height - bottom_crop
            ))
            cropped.save(file_path)
            print("✅ File cropped successfully")
            return True
    except Exception as e:
        print(f"❌ Error cropping file: {e}")
        return False


def main():
    """Main function to create screenshots for Zig examples."""
    parser = argparse.ArgumentParser(description="Create screenshots for Zig examples")
    parser.add_argument("example", nargs="?", help="Example name to create screenshot for")
    parser.add_argument("--list", action="store_true", help="List examples without screenshots")
    parser.add_argument("--cleanup", action="store_true", help="Cleanup existing Zig Excel files in the project root")
    parser.add_argument("--left", type=int, default=0, help="Pixels to crop from left")
    parser.add_argument("--right", type=int, default=0, help="Pixels to crop from right")
    parser.add_argument("--top", type=int, default=0, help="Pixels to crop from top")
    parser.add_argument("--bottom", type=int, default=0, help="Pixels to crop from bottom")
    parser.add_argument("--crop", help="Just crop an existing PNG file")
    
    args = parser.parse_args()
    
    if args.cleanup:
        # Find all Zig Excel files in the project root
        root_dir = Path(__file__).parent.parent
        zig_excel_files = list(root_dir.glob("zig-*.xlsx")) + list(root_dir.glob("zig-*.xlsm"))
        
        if not zig_excel_files:
            print("No Zig Excel files found in the project root.")
            return 0
        
        print(f"Found {len(zig_excel_files)} Zig Excel files in the project root.")
        moved_count = 0
        
        for file_path in zig_excel_files:
            # Extract example name from filename (remove 'zig-' prefix and extension)
            example_name = file_path.stem[4:]  # Skip 'zig-' prefix
            
            if cleanup_excel_file(example_name, file_path):
                moved_count += 1
        
        print(f"Moved {moved_count} of {len(zig_excel_files)} files to the zig-output-xls directory.")
        return 0
    
    if args.list:
        missing = find_examples_without_screenshots()
        if missing:
            print("\nExamples without screenshots:")
            print(f"{'EXAMPLE':<25}")
            print("-" * 25)
            for example in missing:
                print(f"{example:<25}")
            print(f"\nTotal: {len(missing)} examples missing screenshots")
        else:
            print("All examples have screenshots!")
        return 0
    
    if args.crop:
        return 0 if crop_existing_file(
            args.crop,
            args.top,
            args.bottom,
            args.left,
            args.right,
        ) else 1
    
    if not args.example:
        parser.print_help()
        return 1
    
    # Take screenshot - use Excel-specific defaults
    print(f"\n=== Creating screenshot for {args.example} ===")
    success = take_screenshot(
        args.example,
        top_crop=25 if args.top == 0 else args.top,
        bottom_crop=155 if args.bottom == 0 else args.bottom,
        left_crop=args.left,
        right_crop=args.right,
    )
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main()) 